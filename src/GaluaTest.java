import org.junit.jupiter.api.Test;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static Lib.Galua.*;

public class GaluaTest {
    @Test
    void add1(){
        ArrayList<Integer> a = new ArrayList<>(Arrays.asList(1,2));
        ArrayList<Integer> b = new ArrayList<>(Arrays.asList(3,4));
        int[] expected = {4,3,2,1};
        assertEquals(add(a,b).toString(), Arrays.toString(expected));
    }

    @Test
    void add2(){
        ArrayList<Integer> a = new ArrayList<>(Arrays.asList(1,3));
        ArrayList<Integer> b = new ArrayList<>(Arrays.asList(3,4));
        int[] expected = {4,1};
        assertEquals(add(a,b).toString(), Arrays.toString(expected));
    }

    @Test
    void multiply1(){
        ArrayList<Integer> a = new ArrayList<>(Arrays.asList(1,2));
        ArrayList<Integer> b = new ArrayList<>(Arrays.asList(1,2));
        int[] expected = {4,2};
        assertEquals(multiply(a,b).toString(), Arrays.toString(expected));
    }

    @Test
    void multiply2(){
        ArrayList<Integer> a = new ArrayList<>(Arrays.asList(1,4,6));
        ArrayList<Integer> b = new ArrayList<>(Arrays.asList(3,4));
        int[] expected = {10,9,8,7,5,4};
        assertEquals(multiply(a,b).toString(), Arrays.toString(expected));
    }

    @Test
    void multiply3(){
        ArrayList<Integer> a = new ArrayList<>(Arrays.asList(0, 9, 11, 12, 15, 19, 22, 25, 26, 27, 29, 33, 36, 45, 47, 48, 49, 51, 52, 55, 56, 57, 62, 64, 66, 70, 72, 73, 77, 84, 87, 90, 91, 92, 95, 96, 99, 107, 109, 110, 111, 113, 114, 115, 116, 118, 122, 124, 126, 128, 129, 133, 136, 137, 141, 142, 143, 145, 147, 150, 152, 154, 157, 162, 164, 165, 168, 171, 178, 180, 182, 184, 185, 187, 190, 192, 203, 207, 208, 210, 212, 214, 218, 220, 228, 229, 232, 233, 234, 237, 239, 240, 241, 242, 243, 244, 245, 247, 249, 250, 251, 257, 258, 259, 260, 264, 267, 268, 269, 271, 273, 275, 283, 286, 287, 288, 290, 292, 293, 295, 296, 298, 301, 302, 305, 308, 309, 310, 313, 315, 316, 320, 322, 325, 329, 330, 335, 336, 337, 339, 347, 350, 352, 353, 356, 357, 361, 367, 371, 375, 376, 377, 378, 379, 380, 385, 389, 393, 394, 397, 398, 400, 401, 408, 409, 416, 418, 420, 421, 422, 429, 430, 431, 434, 437, 438, 439, 440, 442, 445, 448, 449, 456, 459, 464, 465, 466, 469, 474, 477, 479, 483, 484, 485, 486, 490, 491, 492, 493, 495));
        ArrayList<Integer> b = new ArrayList<>(Arrays.asList(3, 7, 9, 12, 15, 16, 19, 24, 26, 27, 29, 33, 35, 37, 38, 40, 44, 45, 46, 47, 50, 52, 54, 55, 57, 59, 64, 65, 68, 69, 71, 72, 76, 78, 80, 81, 86, 87, 88, 90, 92, 94, 95, 96, 98, 99, 100, 107, 110, 112, 114, 121, 127, 130, 133, 134, 138, 139, 140, 141, 142, 146, 147, 149, 150, 156, 157, 160, 161, 168, 171, 175, 177, 179, 183, 186, 190, 191, 195, 200, 201, 203, 208, 210, 211, 213, 215, 219, 221, 222, 225, 229, 230, 231, 236, 249, 253, 254, 255, 256, 257, 265, 266, 268, 269, 270, 273, 278, 279, 280, 281, 282, 283, 284, 286, 291, 293, 297, 301, 304, 308, 309, 311, 312, 314, 316, 317, 318, 319, 325, 329, 330, 333, 335, 339, 349, 352, 354, 355, 359, 360, 362, 363, 364, 365, 367, 370, 371, 372, 373, 374, 375, 379, 390, 391, 394, 398, 400, 402, 403, 405, 409, 411, 416, 420, 421, 422, 425, 427, 428, 431, 434, 437, 438, 439, 442, 443, 444, 445, 446, 450, 454, 460, 464, 465, 467, 468, 469, 470, 471, 474, 475, 476, 477, 478, 480, 481, 483, 485, 492));
        int[] expected = {239, 234, 232, 231, 227, 224, 223, 220, 216, 215, 212, 211, 210, 208, 207, 204, 203, 199, 197, 196, 192, 191, 190, 187, 186, 185, 183, 182, 178, 176, 175, 174, 173, 172, 171, 170, 169, 168, 165, 160, 158, 156, 155, 154, 149, 148, 147, 140, 139, 136, 131, 129, 127, 126, 125, 124, 122, 120, 116, 114, 113, 112, 111, 109, 108, 106, 103, 97, 96, 93, 92, 91, 90, 87, 85, 84, 79, 77, 75, 73, 72, 70, 69, 67, 64, 62, 58, 57, 56, 55, 53, 51, 49, 46, 44, 38, 37, 34, 33, 30, 29, 28, 23, 19, 18, 17, 16, 9, 7, 4, 2};
        assertEquals(multiply(a,b).toString(), Arrays.toString(expected));
    }

    @Test
    void Associativity(){
        ArrayList<Integer> a = new ArrayList<>(Arrays.asList(240,2));
        ArrayList<Integer> b = new ArrayList<>(Arrays.asList(3,2,5));
        ArrayList<Integer> c = new ArrayList<>(Arrays.asList(300,83,12));
        assertEquals(multiply(add(a,b),c), add(multiply(b,c),multiply(c,a)));
    }

    @Test
    void exponentiate1(){
        ArrayList<Integer> a = new ArrayList<>(Arrays.asList(239, 234, 232, 231, 227, 224, 223, 220, 216, 215, 212, 211, 210, 208, 207, 204, 203, 199, 197, 196, 192, 191, 190, 187, 186, 185, 183, 182, 178, 176, 175, 174, 173, 172, 171, 170, 169, 168, 165, 160, 158, 156, 155, 154, 149, 148, 147, 140, 139, 136, 131, 129, 127, 126, 125, 124, 122, 120, 116, 114, 113, 112, 111, 109, 108, 106, 103, 97, 96, 93, 92, 91, 90, 87, 85, 84, 79, 77, 75, 73, 72, 70, 69, 67, 64, 62, 58, 57, 56, 55, 53, 51, 49, 46, 44, 38, 37, 34, 33, 30, 29, 28, 23, 19, 18, 17, 16, 9, 7, 4, 2));
        int[] expected = {239, 234, 232, 231, 227, 224, 223, 220, 216, 215, 212, 211, 210, 208, 207, 204, 203, 199, 197, 196, 192, 191, 190, 187, 186, 185, 183, 182, 178, 176, 175, 174, 173, 172, 171, 170, 169, 168, 165, 160, 158, 156, 155, 154, 149, 148, 147, 140, 139, 136, 131, 129, 127, 126, 125, 124, 122, 120, 116, 114, 113, 112, 111, 109, 108, 106, 103, 97, 96, 93, 92, 91, 90, 87, 85, 84, 79, 77, 75, 73, 72, 70, 69, 67, 64, 62, 58, 57, 56, 55, 53, 51, 49, 46, 44, 38, 37, 34, 33, 30, 29, 28, 23, 19, 18, 17, 16, 9, 7, 4, 2};
        assertEquals(exponentiate(a, new BigInteger("7856")).toString(), Arrays.toString(expected));
    }

    @Test
    void exp(){

    }
}
